name: Build and Publish Electron App

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 1.0.0)'
        required: true
        type: string
      draft:
        description: 'Create a draft release'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.set-version.outputs.version }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Set Version
        id: set-version
        working-directory: ./app
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT    

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libnotify-dev libnss3

      - name: Update Version
        working-directory: ./app
        run: npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version

      - name: Install Dependencies
        working-directory: ./app
        run: |
          npm ci
          npm run rebuild

      # macOS Signing Setup
      - name: Setup macOS signing
        if: matrix.os == 'macos-latest'
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p builder_keychain build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p builder_keychain build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k builder_keychain build.keychain
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      # # Windows Signing Setup
      # - name: Setup Windows signing
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     echo ${{ secrets.WINDOWS_CERTIFICATE }} | base64 --decode > certificate.pfx
      #   env:
      #     WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      #     WINDOWS_CERTIFICATE_PWD: ${{ secrets.WINDOWS_CERTIFICATE_PWD }}

      # Update electron-builder config for signing
      - name: Update signing configuration
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            echo '{"mac":{"identity":"Developer ID Application: Your Name"}}' > build/electron-builder.json
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo '{"win":{"certificateFile":"certificate.pfx","certificatePassword":"${{ secrets.WINDOWS_CERTIFICATE_PWD }}"}}' > build/electron-builder.json
          fi
        shell: bash

      - name: Build/Release Electron app
        working-directory: ./app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run make

      # Upload artifacts as before...
      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            out/make/**/*.dmg
            out/make/**/*.zip

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            out/make/**/*.exe
            out/make/**/*.msi

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            out/make/**/*.deb
            out/make/**/*.rpm
            out/make/**/*.AppImage

  create-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*-artifacts'
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}